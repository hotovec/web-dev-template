/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *  user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *  (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*
New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:

  rem-calc(10 20 30px 40);

Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets

  rem-calc((10, 20, 30, 40px));

Optionally call with a different base (eg: 8px) to calculate rem.

  rem-calc(16px 32px 48px, 8px);

If you require to comma separate your list

  rem-calc((16px, 32px, 48), 8px);
*/
html, body {
  height: 100%; }

/*  "../components/bower-foundation5/scss/foundation/components/inline-lists",*/
html {
  box-sizing: border-box;
  -webkit-font-smoothing: antialiased; }

*, *:before, *:after {
  box-sizing: inherit;
  -webkit-font-smoothing: antialiased; }

.l-navbar.is-sticky {
  position: fixed;
  width: 100%;
  top: 0; }

.l-footer {
  overflow: hidden;
  background-color: lightgoldenrodyellow; }
  .l-footer.is-sticky {
    position: fixed;
    width: 100%;
    bottom: 0; }

.l-page.l-page_detail-full .l-page--container {
  background-color: #f5f5f5; }
  .l-page.l-page_detail-full .l-page--container:after {
    content: " ";
    display: block;
    clear: both; }
  .l-page.l-page_detail-full .l-page--container .m-article--header {
    background-position: center;
    background-size: cover;
    background-repeat: no-repeat;
    height: 600px;
    overflow: hidden; }
    .l-page.l-page_detail-full .l-page--container .m-article--header h1 {
      margin: 0; }
  .l-page.l-page_detail-full .l-page--container .m-article--content {
    background-color: antiquewhite;
    max-width: 96%;
    margin-left: auto;
    margin-right: auto; }
    .l-page.l-page_detail-full .l-page--container .m-article--content p {
      margin-top: 0;
      padding: 0;
      margin-bottom: 20px; }
    .l-page.l-page_detail-full .l-page--container .m-article--content:after {
      content: " ";
      display: block;
      clear: both; }
    @media (min-width: 640px) {
      .l-page.l-page_detail-full .l-page--container .m-article--content {
        max-width: 620px;
        margin-left: auto;
        margin-right: auto; }
        .l-page.l-page_detail-full .l-page--container .m-article--content:after {
          content: " ";
          display: block;
          clear: both; } }
    @media (min-width: 960px) {
      .l-page.l-page_detail-full .l-page--container .m-article--content {
        max-width: 940px;
        margin-left: auto;
        margin-right: auto; }
        .l-page.l-page_detail-full .l-page--container .m-article--content:after {
          content: " ";
          display: block;
          clear: both; } }
    @media (min-width: 1400px) {
      .l-page.l-page_detail-full .l-page--container .m-article--content {
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto; }
        .l-page.l-page_detail-full .l-page--container .m-article--content:after {
          content: " ";
          display: block;
          clear: both; } }
  .l-page.l-page_detail-full .l-page--container .m-article--content-container {
    background-color: #008cba; }
    .l-page.l-page_detail-full .l-page--container .m-article--content-container img {
      width: 100%; }
    @media (min-width: 640px) {
      .l-page.l-page_detail-full .l-page--container .m-article--content-container {
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        width: 83.3333333333%;
        float: left;
        margin-left: 8.3333333333%; } }
    @media (min-width: 960px) {
      .l-page.l-page_detail-full .l-page--container .m-article--content-container {
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        width: 66.6666666667%;
        float: left;
        margin-left: 16.6666666667%; } }
    @media (min-width: 1400px) {
      .l-page.l-page_detail-full .l-page--container .m-article--content-container {
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        width: 50%;
        float: left;
        margin-left: 25%; } }
  .l-page.l-page_detail-full .l-page--container .m-article--abstract {
    background-color: #ff0; }
  .l-page.l-page_detail-full .l-page--container .m-article--footer {
    background-color: pink; }
  .l-page.l-page_detail-full .l-page--container .m-article--header, .l-page.l-page_detail-full .l-page--container .m-article--footer {
    padding: 0 calc(50% - 48%); }
    @media (min-width: 640px) {
      .l-page.l-page_detail-full .l-page--container .m-article--header, .l-page.l-page_detail-full .l-page--container .m-article--footer {
        padding: 0 calc(50% - 310px); } }
    @media (min-width: 960px) {
      .l-page.l-page_detail-full .l-page--container .m-article--header, .l-page.l-page_detail-full .l-page--container .m-article--footer {
        padding: 0 calc(50% - 470px); } }
    @media (min-width: 1400px) {
      .l-page.l-page_detail-full .l-page--container .m-article--header, .l-page.l-page_detail-full .l-page--container .m-article--footer {
        padding: 0 calc(50% - 600px); } }
  .l-page.l-page_detail-full .l-page--container .m-article--header-container, .l-page.l-page_detail-full .l-page--container .m-article--footer-container {
    overflow: hidden; }
    @media (min-width: 640px) {
      .l-page.l-page_detail-full .l-page--container .m-article--header-container, .l-page.l-page_detail-full .l-page--container .m-article--footer-container {
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        width: 83.3333333333%;
        float: left;
        margin-left: 8.3333333333%; } }
    @media (min-width: 960px) {
      .l-page.l-page_detail-full .l-page--container .m-article--header-container, .l-page.l-page_detail-full .l-page--container .m-article--footer-container {
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        width: 66.6666666667%;
        float: left;
        margin-left: 16.6666666667%; } }
    @media (min-width: 1400px) {
      .l-page.l-page_detail-full .l-page--container .m-article--header-container, .l-page.l-page_detail-full .l-page--container .m-article--footer-container {
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        width: 50%;
        float: left;
        margin-left: 25%; } }
  .l-page.l-page_detail-full .l-page--container aside {
    display: none; }

.m-navbar {
  height: 100%;
  width: 100%; }
  .m-navbar .m-navbar--container {
    max-width: 96%;
    margin-left: auto;
    margin-right: auto;
    display: flex;
    flex-wrap: wrap; }
    .m-navbar .m-navbar--container:after {
      content: " ";
      display: block;
      clear: both; }
    @media (min-width: 640px) {
      .m-navbar .m-navbar--container {
        max-width: 620px;
        margin-left: auto;
        margin-right: auto; }
        .m-navbar .m-navbar--container:after {
          content: " ";
          display: block;
          clear: both; } }
    @media (min-width: 960px) {
      .m-navbar .m-navbar--container {
        max-width: 940px;
        margin-left: auto;
        margin-right: auto; }
        .m-navbar .m-navbar--container:after {
          content: " ";
          display: block;
          clear: both; } }
    @media (min-width: 1400px) {
      .m-navbar .m-navbar--container {
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto; }
        .m-navbar .m-navbar--container:after {
          content: " ";
          display: block;
          clear: both; } }
  .m-navbar .m-navbar--menu-logo, .m-navbar .m-navbar--menu-primary, .m-navbar .m-navbar--menu-secondary {
    height: 48px; }
  .m-navbar .m-navbar--logo {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 20%;
    float: left;
    order: 1; }
  .m-navbar .m-navbar--menu-primary {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 40%;
    float: left;
    order: 2; }
  .m-navbar .m-navbar--menu-secondary {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 40%;
    float: left;
    order: 3; }

.m-navbar {
  background-color: transparent;
  border-top: 1px solid #dfdfe3;
  border-bottom: 1px solid #dfdfe3;
  font-family: 'helvetica neue', Helvetica, Arial, sans-serif;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase; }
  .m-navbar em {
    font-style: normal; }
  .m-navbar .m-navbar--logo .mm-has-svg {
    width: 100%;
    min-height: 48px;
    background-repeat: no-repeat;
    background-size: contain; }
  .m-navbar .m-navbar--menu-primary a, .m-navbar .m-navbar--menu-secondary a {
    display: block;
    height: 100%;
    line-height: 48px;
    padding: 0 10px;
    cursor: pointer;
    color: #666;
    text-decoration: none; }
    .m-navbar .m-navbar--menu-primary a:hover, .m-navbar .m-navbar--menu-secondary a:hover {
      color: #333333;
      background-color: transparent; }
  .m-navbar .m-navbar--menu-primary {
    padding: 0;
    list-style: none;
    overflow: hidden;
    margin-top: 0;
    margin-bottom: 0; }
    .m-navbar .m-navbar--menu-primary > li {
      list-style: none;
      float: left;
      margin-left: 0;
      margin-right: 0px;
      display: block;
      height: 100%; }
      .m-navbar .m-navbar--menu-primary > li:last-child {
        margin-right: 0; }
      .m-navbar .m-navbar--menu-primary > li > * {
        display: block; }
  .m-navbar .m-navbar--menu-secondary {
    padding: 0;
    list-style: none;
    overflow: hidden;
    margin-top: 0;
    margin-bottom: 0; }
    .m-navbar .m-navbar--menu-secondary > li {
      list-style: none;
      float: right;
      margin-right: 0;
      margin-left: 0px;
      display: block;
      height: 100%; }
      .m-navbar .m-navbar--menu-secondary > li:last-child {
        margin-left: 0; }
      .m-navbar .m-navbar--menu-secondary > li > * {
        display: block; }

.m-footer {
  height: 100%;
  width: 100%; }
  .m-footer .m-footer--container {
    max-width: 96%;
    margin-left: auto;
    margin-right: auto; }
    .m-footer .m-footer--container:after {
      content: " ";
      display: block;
      clear: both; }
    @media (min-width: 640px) {
      .m-footer .m-footer--container {
        max-width: 620px;
        margin-left: auto;
        margin-right: auto; }
        .m-footer .m-footer--container:after {
          content: " ";
          display: block;
          clear: both; } }
    @media (min-width: 960px) {
      .m-footer .m-footer--container {
        max-width: 940px;
        margin-left: auto;
        margin-right: auto; }
        .m-footer .m-footer--container:after {
          content: " ";
          display: block;
          clear: both; } }
    @media (min-width: 1400px) {
      .m-footer .m-footer--container {
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto; }
        .m-footer .m-footer--container:after {
          content: " ";
          display: block;
          clear: both; } }
  .m-footer .m-footer--section {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 25%;
    float: left;
    border: 1px solid black; }
  .m-footer .m-footer--copyright {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 100%;
    float: left;
    height: 64px;
    border: 1px solid black;
    display: flex; }
  .m-footer .m-footer--menu-primary, .m-footer .m-footer--menu-secondary {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 42.8571428571%;
    float: left;
    padding: 0;
    list-style: none;
    overflow: hidden;
    margin-top: 0;
    margin-bottom: 0;
    border: 1px solid blue; }
    .m-footer .m-footer--menu-primary > li, .m-footer .m-footer--menu-secondary > li {
      list-style: none;
      float: left;
      margin-left: 0;
      margin-right: 0px;
      display: block;
      height: 100%; }
      .m-footer .m-footer--menu-primary > li:last-child, .m-footer .m-footer--menu-secondary > li:last-child {
        margin-right: 0; }
      .m-footer .m-footer--menu-primary > li > *, .m-footer .m-footer--menu-secondary > li > * {
        display: block; }
  .m-footer .m-footer--logo {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 14.2857142857%;
    float: left; }

.m-footer {
  background-color: grey; }
  .m-footer .m-footer--container {
    background-color: grey; }
  .m-footer .m-footer--menu-primary {
    padding: 0;
    list-style: none;
    overflow: hidden;
    margin-top: 0;
    margin-bottom: 0; }
    .m-footer .m-footer--menu-primary > li {
      list-style: none;
      float: left;
      margin-left: 0;
      margin-right: 30px;
      display: block;
      height: 100%; }
      .m-footer .m-footer--menu-primary > li:last-child {
        margin-right: 0; }
      .m-footer .m-footer--menu-primary > li > * {
        display: block; }
  .m-footer .m-footer--menu-secondary {
    padding: 0;
    list-style: none;
    overflow: hidden;
    margin-top: 0;
    margin-bottom: 0; }
    .m-footer .m-footer--menu-secondary > li {
      list-style: none;
      float: right;
      margin-right: 0;
      margin-left: 30px;
      display: block;
      height: 100%; }
      .m-footer .m-footer--menu-secondary > li:last-child {
        margin-left: 0; }
      .m-footer .m-footer--menu-secondary > li > * {
        display: block; }
  .m-footer .m-footer--logo {
    text-align: center; }

.m-coverlines {
  height: 100px;
  background-color: #dedede;
  background-image: url('http://lorempixel.com/900/400/fashion/2/');
  background-repeat: no-repeat;
  background-size: cover;
  background-position: bottom center;
  position: relative;
  overflow: hidden;
  height: 100px;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start; }
  .m-coverlines .m-coverlines--container {
    max-width: 96%;
    margin-left: auto;
    margin-right: auto;
    height: 80px;
    width: 100%; }
    .m-coverlines .m-coverlines--container:after {
      content: " ";
      display: block;
      clear: both; }
    @media (min-width: 640px) {
      .m-coverlines .m-coverlines--container {
        max-width: 620px;
        margin-left: auto;
        margin-right: auto; }
        .m-coverlines .m-coverlines--container:after {
          content: " ";
          display: block;
          clear: both; } }
    @media (min-width: 960px) {
      .m-coverlines .m-coverlines--container {
        max-width: 940px;
        margin-left: auto;
        margin-right: auto; }
        .m-coverlines .m-coverlines--container:after {
          content: " ";
          display: block;
          clear: both; } }
    @media (min-width: 1400px) {
      .m-coverlines .m-coverlines--container {
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto; }
        .m-coverlines .m-coverlines--container:after {
          content: " ";
          display: block;
          clear: both; } }
  .m-coverlines.mm-gravity-bottom {
    align-items: flex-end; }
  .m-coverlines.mm-gravity-top {
    align-items: flex-start; }
  .m-coverlines .m-coverlines--logo {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 50%;
    float: left;
    height: 100%;
    overflow: hidden; }
    .m-coverlines .m-coverlines--logo img {
      height: 100%;
      width: auto; }
  .m-coverlines article:nth-of-type(1) {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 25%;
    float: left; }
  .m-coverlines article:nth-of-type(2) {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    width: 25%;
    float: right; }


/*# sourceMappingURL=main.css.map */